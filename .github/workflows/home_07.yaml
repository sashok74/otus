name: Build bulk with dynamic and static linking

on: 
  push:
    branches:
      - main
    paths:
      - 'bulk/**'  
  pull_request:
    branches:
      - main
    paths:  
      - 'bulk/**'        

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # configuration: [Release, Debug]
        # build_type: [STATIC, SHARED]
        configuration: [Release]
        build_type: [STATIC]        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake python3-pip doxygen graphviz clang-format
          pip3 install "conan>=2.0"

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ~/.conan
          key: conan-${{ runner.os }}-${{ matrix.configuration }}
          restore-keys: |
            conan-${{ runner.os }}-

      # Проверка форматирования перед сборкой
      - name: Run clang-format check
        run: |
          find bulk/ -name "*.cpp" -o -name "*.h" | xargs clang-format -style=file --dry-run -Werror

      # Автоформатирование кода в CI/CD
      - name: Format code with clang-format
        run: |
          find bulk/ -name "*.cpp" -o -name "*.h" | xargs clang-format -style=file -i

      - name: Commit formatted code
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git commit -m "Auto-format code with clang-format" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Install Conan and project dependencies
        run: |
          conan profile detect
          conan install . --output-folder=bulk/build --build=missing -s build_type=${{ matrix.configuration }}

      - name: Configure CMake
        run: |
          cd bulk/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
                -DPATCH_VERSION=${{ github.run_number }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} \
                -DBUILD_SHARED_LIBS=$([ "${{ matrix.build_type }}" == 'SHARED' ] && echo ON || echo OFF)
          
      # Сборка проекта
      - name: Build project
        run: |
          cd bulk/build
          cmake --build .
      
      # Запуск тестов
      - name: Run tests
        run: | 
          cd bulk/build
          ctest .

      # Условие для создания release:
      - name: Package with CPack
        if: matrix.configuration == 'Release'
        run: |
          cd bulk/build
          cpack -G DEB
          echo "Packages created for ${{ matrix.build_type }} ${{ matrix.configuration }}"

      - name: Set Build Type Suffix
        run: |
          if [ "${{ matrix.build_type }}" == "SHARED" ]; then
            echo "BUILD_SUFFIX=shared" >> $GITHUB_ENV
          else
            echo "BUILD_SUFFIX=static" >> $GITHUB_ENV
          fi

      - name: Generate unique release tag
        id: generate_tag
        run: |
          # Создаем уникальный тег на основе run_number и временной метки
          TAG_NAME="release-${{ github.run_number }}-$(date +%Y%m%d%H%M%S)"
          echo "Generated tag: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

      # Создание релиза с уникальным тегом
      - name: Create Release
        if: matrix.configuration == 'Release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}    # Используем переменную окружения для тега
          release_name: "Release ${{ env.tag_name }}"  # Используем тот же тег как имя релиза
          draft: false
          prerelease: false
        
      - name: Upload Release Asset
        if: matrix.configuration == 'Release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bulk/build/bulk-0.0.${{ github.run_number }}-${{ env.BUILD_SUFFIX }}.deb
          asset_name: bulk-0.0.${{ github.run_number }}-${{ env.BUILD_SUFFIX }}.deb
          asset_content_type: application/vnd.debian.binary-package   

      # Генерация документации
      - name: Generate Documentation
        run: |
          cd bulk
          doxygen Doxyfile

      # Загрузка документации как артефакта
      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-bulk-${{ github.run_number }}
          path: ./bulk/docs

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: ./bulk/docs/html
          artifact_name: github-pages-${{ github.run_number }}  # Уникальное имя для артефакта
