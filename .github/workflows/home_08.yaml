name: Build bayan with dynamic and static linking

on: 
  push:
    branches:
      - main
    paths:
      - 'bayan/**'
  pull_request:
    branches:
      - main
    paths:
      - 'bayan/**'        

jobs:
  docs:  # Генерация документации перед сборкой
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz

      - name: Generate Documentation
        run: |
          cd bayan
          doxygen Doxyfile

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-bayan-${{ github.run_number }}
          path: ./bayan/docs

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: ./bayan/docs/html

  build:
    needs: docs  # Зависимость от генерации документации
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [STATIC, SHARED]
        configuration: [Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake python3-pip clang-format
          pip3 install "conan>=2.0"

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ~/.conan
          key: conan-${{ runner.os }}-${{ matrix.configuration }}
          restore-keys: |
            conan-${{ runner.os }}-

      # Проверка форматирования перед сборкой
      - name: Run clang-format check
        run: |
          find bayan/ -name "*.cpp" -o -name "*.h" | xargs clang-format -style=file --dry-run -Werror

      # Conan     
      - name: Install Conan and project dependencies
        run: |
          conan profile detect
          conan install . --output-folder=bayan/build --build=missing -s build_type=${{ matrix.configuration }}

      - name: Configure CMake
        run: |
          cd bayan/build
          if [ "${{ matrix.build_type }}" == "SHARED" ]; then
            BUILD_SHARED_LIBS=ON
          else
            BUILD_SHARED_LIBS=OFF
          fi
          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
                    -DPATCH_VERSION=${{ github.run_number }} \
                    -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} \
                    -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
          
      # Сборка проекта
      - name: Build project
        run: |
          cd bayan/build
          cmake --build .

      # Запуск тестов
      - name: Run tests
        run: | 
          cd bayan/build
          ctest --output-on-failure

      # Создание пакета с помощью CPack
      - name: Package with CPack
        run: |
          cd bayan/build
          cpack -G DEB
          echo "Packages created for ${{ matrix.build_type }} ${{ matrix.configuration }}"

      # Загрузка билда как артефакт
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bayan-${{ matrix.build_type }}-build
          path: ./bayan/build/bayan-0.0.${{ github.run_number }}-${{ matrix.build_type }}.deb

  release:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: bayan-STATIC-build
          path: ./artifacts/static

      - name: Download Build SHARED Artifacts
        uses: actions/download-artifact@v3
        with:
          name: bayan-SHARED-build
          path: ./artifacts/shared

      - name: Generate Release Tag
        id: generate_tag
        run: |
          TAG_NAME="release-${{ github.run_number }}-$(date +%Y%m%d%H%M%S)"
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: "Release ${{ env.tag_name }}"
          draft: false
          prerelease: false

      # Добавление статического билда в релиз
      - name: Upload STATIC Build Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/static/bayan-0.0.${{ github.run_number }}-STATIC.deb
          asset_name: bayan-0.0.${{ github.run_number }}-STATIC.deb
          asset_content_type: application/vnd.debian.binary-package

      # Добавление shared билда в релиз
      - name: Upload SHARED Build Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/shared/bayan-0.0.${{ github.run_number }}-SHARED.deb
          asset_name: bayan-0.0.${{ github.run_number }}-SHARED.deb
          asset_content_type: application/vnd.debian.binary-package