name: Build bayan with dynamic and static linking

on: 
  push:
    branches:
      - main
    paths:
      - 'bayan/**'  
  pull_request:
    branches:
      - main
    paths:  
      - 'bayan/**'        

jobs:
  docs:  # Генерация документации перед сборкой
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz

      - name: Generate Documentation
        run: |
          cd bayan
          doxygen Doxyfile

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-bayan-${{ github.run_number }}
          path: ./bayan/docs

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: ./bayan/docs/html
          artifact_name: github-pages-${{ github.run_number }}

  build:
    needs: docs  # Ждет завершения генерации документации
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [STATIC, SHARED]
        configuration: [Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake python3-pip clang-format
          pip3 install "conan>=2.0"

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ~/.conan
          key: conan-${{ runner.os }}-${{ matrix.configuration }}
          restore-keys: |
            conan-${{ runner.os }}-

      # Проверка форматирования перед сборкой
      - name: Run clang-format check
        run: |
          find bayan/ -name "*.cpp" -o -name "*.h" | xargs clang-format -style=file --dry-run -Werror

      # Автоформатирование кода в CI/CD
      - name: Format code with clang-format
        run: |
          find bayan/ -name "*.cpp" -o -name "*.h" | xargs clang-format -style=file -i

      - name: Commit formatted code
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git commit -m "Auto-format code with clang-format" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Install Conan and project dependencies
        run: |
          conan profile detect
          conan install . --output-folder=bayan/build --build=missing -s build_type=${{ matrix.configuration }}

      - name: Configure CMake
        run: |
          cd bayan/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
                -DPATCH_VERSION=${{ github.run_number }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} \
                -DBUILD_SHARED_LIBS=$([ "${{ matrix.build_type }}" == 'SHARED' ] && echo ON || echo OFF)
          
      # Сборка проекта
      - name: Build project
        run: |
          cd bayan/build
          cmake --build .
      
      # Запуск тестов
      - name: Run tests
        run: | 
          cd bayan/build
          ctest .

      # Условие для создания release:
      - name: Package with CPack
        if: matrix.configuration == 'Release'
        run: |
          cd bayan/build
          cpack -G DEB
        - name: Generate shared release tag
          if: matrix.build_type == 'STATIC'
          run: |
            TAG_NAME="release-${{ github.run_number }}"
            echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
        
        - name: Create Release (only once)
          if: matrix.build_type == 'STATIC'
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ env.tag_name }}
            release_name: "Release ${{ env.tag_name }}"
            draft: false
            prerelease: false
        
        - name: Upload Release Asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url || github.event.release.upload_url }}
            asset_path: ./bayan/build/bayan-0.0.${{ github.run_number }}-${{ matrix.build_type == 'SHARED' && 'shared' || 'static' }}.deb
            asset_name: bayan-0.0.${{ github.run_number }}-${{ matrix.build_type == 'SHARED' && 'shared' || 'static' }}.deb
            asset_content_type: application/vnd.debian.binary-package
  
